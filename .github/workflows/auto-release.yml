name: Auto Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/build.yml'

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows (x64)
          - platform: 'windows-latest'
            os_name: 'Windows'
            target: 'x86_64-pc-windows-msvc'

          # Linux (x64)
          - platform: 'ubuntu-22.04'
            os_name: 'Linux'
            target: 'x86_64-unknown-linux-gnu'

    runs-on: ${{ matrix.platform }}

    steps:
      # 1. リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得（タグ取得のため）

      # 2. Node.js のセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Rust のセットアップ
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # 4. Rust キャッシュ
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # 5. Linux: システム依存関係のインストール
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libssl-dev

      # 6. バージョン決定
      - name: Determine version
        id: version
        shell: bash
        run: |
          # 最新のGitタグを取得
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "Latest tag: $LATEST_TAG"

          # タグからバージョン番号を抽出（vプレフィックスを除去）
          CURRENT_VERSION=${LATEST_TAG#v}
          echo "Current version: $CURRENT_VERSION"

          # package.jsonのバージョンを確認
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package.json version: $PACKAGE_VERSION"

          # package.jsonのバージョンが最新タグと異なる場合は手動更新と判断
          if [ "$PACKAGE_VERSION" != "$CURRENT_VERSION" ]; then
            NEW_VERSION=$PACKAGE_VERSION
            echo "Manual version update detected: $NEW_VERSION"
          else
            # PATCH番号を自動インクリメント
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "Auto-incrementing version: $NEW_VERSION"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "New tag: v$NEW_VERSION"

      # 7. バージョンファイル更新
      - name: Update version files
        shell: bash
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo "Updating version to: $VERSION"

          # package.json更新
          npm version $VERSION --no-git-tag-version

          # Cargo.toml更新
          if [ "${{ runner.os }}" = "Windows" ]; then
            # Windows用（PowerShellは使わずbash互換のsedを使用）
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" src-tauri/Cargo.toml
          else
            # Linux/macOS用
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" src-tauri/Cargo.toml
          fi

          # tauri.conf.json更新
          if [ "${{ runner.os }}" = "Windows" ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json
          else
            sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" src-tauri/tauri.conf.json
          fi

          echo "Version files updated successfully"

      # 8. パッチノート生成
      - name: Generate release notes
        id: release_notes
        shell: bash
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            NOTES="初回リリース"
          else
            # 前回のタグから今回までのコミットログを取得
            NOTES=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" --no-merges)

            # ログが空の場合（タグ作成直後など）
            if [ -z "$NOTES" ]; then
              NOTES="- マイナーアップデート"
            fi
          fi

          # マルチライン出力対応
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Release notes generated:"
          echo "$NOTES"

      # 9. Gitタグ作成とプッシュ（最初のplatformでのみ実行）
      - name: Create and push tag
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 既存のタグを確認
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.tag }} already exists, skipping tag creation"
          else
            git tag -a ${{ steps.version.outputs.tag }} -m "Release ${{ steps.version.outputs.tag }}"
            git push origin ${{ steps.version.outputs.tag }}
            echo "Tag ${{ steps.version.outputs.tag }} created and pushed"
          fi

      # 10. npm依存関係のインストール
      - name: Install npm dependencies
        run: npm ci

      # 11. フロントエンドのビルド
      - name: Build frontend
        run: npm run build

      # 12. Tauriアプリのビルドとリリース
      - name: Build and Release Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ steps.version.outputs.tag }}
          releaseName: 'VDI-solid ${{ steps.version.outputs.tag }}'
          releaseBody: |
            ## VDI-solid ${{ steps.version.outputs.tag }}

            ### 変更内容
            ${{ steps.release_notes.outputs.notes }}

            ### ダウンロード
            - **Windows**: `.msi` または `-setup.exe`
            - **Linux**: `.AppImage` または `.deb`

            ### インストール方法
            Windows: `.msi`ファイルをダウンロードして実行してください。
            Linux: `.AppImage`ファイルに実行権限を付与して実行してください。

            ### アップデート
            アプリ内の設定メニューから自動アップデートが利用可能です。
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }}
