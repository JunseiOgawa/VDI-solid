name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'  # v0.1.0, v1.2.3などのタグでトリガー

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows (x64)
          - platform: 'windows-latest'
            os_name: 'Windows'
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}

    steps:
      # 1. リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. タグからバージョン情報を取得
      - name: Get version from tag
        id: get_version
        run: |
          # タグ名からバージョンを抽出（例: refs/tags/v0.1.6 → 0.1.6）
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Version: $VERSION"
          echo "Tag: $TAG"
        shell: bash

      # 3. Node.js のセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 4. Rust のセットアップ
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # 5. Rust キャッシュ（ビルド高速化）
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # 6. npm 依存関係のインストール
      - name: Install npm dependencies
        run: npm ci

      # 7. フロントエンドのビルド
      - name: Build frontend
        run: npm run build

      # 8. Tauri アプリのビルド
      - name: Build Tauri app
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: npm run tauri build -- --target ${{ matrix.target }}

      # 9. ビルド成果物の確認
      - name: List build artifacts
        shell: bash
        run: |
          ls -la src-tauri/target/${{ matrix.target }}/release/bundle/msi/ || true
          ls -la src-tauri/target/${{ matrix.target }}/release/bundle/nsis/ || true

      # 10. リリースの作成
      - name: Create Release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.TAG }} \
            --title "VDI-solid ${{ env.TAG }}" \
            --notes "## VDI-solid ${{ env.TAG }}

          ### Downloads
          - **Windows**: \`.msi\` または \`-setup.exe\`

          詳細は [README](https://github.com/${{ github.repository }}/blob/main/README.md) を参照してください。" \
            || echo "Release already exists"

      # 11. Windows成果物のアップロード
      - name: Upload Windows artifacts
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # MSI にはアップデータ用の .zip/.sig は生成されません（Windows Updater は NSIS を利用）
          # globs が存在しない場合でも失敗しないように nullglob を有効化
          shopt -s nullglob

          files=(
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*-setup.exe
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*-setup.nsis.zip
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*-setup.nsis.zip.sig
          )

          echo "Will upload the following files (if any):"
          printf ' - %s\n' "${files[@]}"

          if [ ${#files[@]} -gt 0 ]; then
            gh release upload ${{ env.TAG }} "${files[@]}" --clobber
          else
            echo "No Windows artifacts found to upload."
          fi

      # 12. latest.jsonの生成とアップロード（Windows専用）
      - name: Generate and upload latest.json
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "=== Generating latest.json for Windows platform ==="

          # Windows NSIS の署名とファイル名を取得
          NSIS_DIR="src-tauri/target/${{ matrix.target }}/release/bundle/nsis"

          echo "Looking for NSIS artifacts in: $NSIS_DIR"
          ls -la "$NSIS_DIR" || true

          # .nsis.zip.sig ファイルから署名を取得
          if [ -f "$NSIS_DIR"/*-setup.nsis.zip.sig ]; then
            WINDOWS_SIG=$(cat "$NSIS_DIR"/*-setup.nsis.zip.sig | head -n 1)
            WINDOWS_FILE=$(basename "$NSIS_DIR"/*-setup.nsis.zip)
            echo "Found signature: ${WINDOWS_SIG:0:50}..."
            echo "Found file: $WINDOWS_FILE"
          else
            echo "ERROR: NSIS signature file not found!"
            exit 1
          fi

          # latest.json を生成
          cat > latest.json << EOF
          {
            "version": "${{ env.TAG }}",
            "notes": "VDI-solid ${{ env.TAG }} がリリースされました",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "windows-x86_64": {
                "signature": "${WINDOWS_SIG}",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/${WINDOWS_FILE}"
              }
            }
          }
          EOF

          # latest.jsonの内容を確認
          echo "=== latest.json の内容 ==="
          cat latest.json

          # アップロード
          echo "=== Uploading latest.json to release ==="
          gh release upload ${{ env.TAG }} latest.json --clobber
          echo "✓ Successfully uploaded latest.json"
