name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'  # v0.1.0, v1.2.3などのタグでトリガー

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows (x64)
          - platform: 'windows-latest'
            os_name: 'Windows'
            target: 'x86_64-pc-windows-msvc'

          # Linux (x64)
          - platform: 'ubuntu-22.04'
            os_name: 'Linux'
            target: 'x86_64-unknown-linux-gnu'

    runs-on: ${{ matrix.platform }}

    steps:
      # 1. リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. タグからバージョン情報を取得
      - name: Get version from tag
        id: get_version
        run: |
          # タグ名からバージョンを抽出（例: refs/tags/v0.1.6 → 0.1.6）
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Version: $VERSION"
          echo "Tag: $TAG"
        shell: bash

      # 3. Node.js のセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 4. Rust のセットアップ
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # 5. Rust キャッシュ（ビルド高速化）
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # 6. Linux: システム依存関係のインストール
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libssl-dev

      # 7. npm 依存関係のインストール
      - name: Install npm dependencies
        run: npm ci

      # 8. フロントエンドのビルド
      - name: Build frontend
        run: npm run build

      # 9. Tauri アプリのビルド
      - name: Build Tauri app
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: npm run tauri build -- --target ${{ matrix.target }}

      # 10. ビルド成果物の確認
      - name: List build artifacts
        run: |
          if [ "${{ matrix.platform }}" == "windows-latest" ]; then
            ls -la src-tauri/target/${{ matrix.target }}/release/bundle/msi/ || true
            ls -la src-tauri/target/${{ matrix.target }}/release/bundle/nsis/ || true
          else
            ls -la src-tauri/target/${{ matrix.target }}/release/bundle/appimage/ || true
            ls -la src-tauri/target/${{ matrix.target }}/release/bundle/deb/ || true
          fi
        shell: bash

      # 11. リリースの作成（最初のジョブのみ）
      - name: Create Release
        if: matrix.platform == 'windows-latest'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.TAG }} \
            --title "VDI-solid ${{ env.TAG }}" \
            --notes "## VDI-solid ${{ env.TAG }}

          ### Downloads
          - **Windows**: \`.msi\` または \`-setup.exe\`
          - **Linux**: \`.AppImage\` または \`.deb\`

          詳細は [README](https://github.com/${{ github.repository }}/blob/main/README.md) を参照してください。" \
            || echo "Release already exists"

      # 12. Windows成果物のアップロード
      - name: Upload Windows artifacts
        if: matrix.platform == 'windows-latest'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ env.TAG }} \
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi \
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi.zip \
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi.zip.sig \
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*-setup.exe \
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*-setup.nsis.zip \
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*-setup.nsis.zip.sig \
            --clobber

      # 13. Linux成果物のアップロード
      - name: Upload Linux artifacts
        if: matrix.platform == 'ubuntu-22.04'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ env.TAG }} \
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage \
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage.tar.gz \
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage.tar.gz.sig \
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb \
            --clobber

      # 14. latest.jsonの生成とアップロード
      - name: Generate and upload latest.json
        if: matrix.platform == 'ubuntu-22.04'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 最初にビルド成果物を確認
          echo "=== Windows artifacts ==="
          find src-tauri/target/x86_64-pc-windows-msvc/release/bundle/ -name "*.sig" 2>/dev/null || echo "Windows署名ファイルが見つかりません"

          echo "=== Linux artifacts ==="
          find src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/ -name "*.sig" 2>/dev/null || echo "Linux署名ファイルが見つかりません"

          # Windows MSIの署名ファイルを取得
          WINDOWS_SIG=$(cat src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi.zip.sig 2>/dev/null | head -n 1)
          WINDOWS_FILE=$(basename src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi.zip 2>/dev/null | head -n 1)

          # Linux AppImageの署名ファイルを取得
          LINUX_SIG=$(cat src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage.tar.gz.sig 2>/dev/null | head -n 1)
          LINUX_FILE=$(basename src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage.tar.gz 2>/dev/null | head -n 1)

          # latest.jsonを生成
          cat > latest.json << EOF
          {
            "version": "${{ env.TAG }}",
            "notes": "VDI-solid ${{ env.TAG }} がリリースされました",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "windows-x86_64": {
                "signature": "${WINDOWS_SIG}",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/${WINDOWS_FILE}"
              },
              "linux-x86_64": {
                "signature": "${LINUX_SIG}",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/${LINUX_FILE}"
              }
            }
          }
          EOF

          # latest.jsonの内容を確認
          echo "=== latest.json の内容 ==="
          cat latest.json

          # アップロード
          gh release upload ${{ env.TAG }} latest.json --clobber
